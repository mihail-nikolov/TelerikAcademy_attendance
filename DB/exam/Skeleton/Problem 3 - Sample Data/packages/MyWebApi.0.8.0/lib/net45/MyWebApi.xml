<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyWebApi</name>
    </assembly>
    <members>
        <member name="T:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1">
            <summary>
            Base class for all test builders with action result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Base.BaseTestBuilderWithCaughtException">
            <summary>
            Base class for test builders with caught exception.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Base.BaseTestBuilderWithAction">
            <summary>
            Base class for all test builders with action call.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Base.BaseTestBuilder">
            <summary>
            Base class for all test builders.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Base.IBaseTestBuilder">
            <summary>
            Base interface for all test builders.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilder.AndProvideTheController">
            <summary>
            Gets the controller on which the action is tested.
            </summary>
            <returns>ASP.NET Web API controller on which the action is tested.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilder.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP request message with which the action will be tested.
            </summary>
            <returns>HttpRequestMessage from the tested controller.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilder.AndProvideTheControllerAttributes">
            <summary>
            Gets the attributes on the tested controller..
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the controller.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilder.#ctor(System.Web.Http.ApiController,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Base.BaseTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which will be tested.</param>
            <param name="controllerAttributes">Collected attributes from the tested controller.</param>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilder.AndProvideTheController">
            <summary>
            Gets the controller on which the action is tested.
            </summary>
            <returns>ASP.NET Web API controller on which the action is tested.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilder.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP request message with which the action will be tested.
            </summary>
            <returns>HttpRequestMessage from the tested controller.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilder.AndProvideTheControllerAttributes">
            <summary>
            Gets the attributes on the tested controller..
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the controller.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Base.BaseTestBuilder.Controller">
            <summary>
            Gets the controller on which the action will be tested.
            </summary>
            <value>Controller on which the action will be tested.</value>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithAction">
            <summary>
            Base class for all test builders with action call.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithAction.AndProvideTheActionName">
            <summary>
            Gets the action name which will be tested.
            </summary>
            <returns>Action name to be tested.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithAction.AndProvideTheActionAttributes">
            <summary>
            Gets the action attributes on the called action.
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the action.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithAction.#ctor(System.Web.Http.ApiController,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Base.BaseTestBuilderWithAction"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithAction.AndProvideTheActionName">
            <summary>
            Gets the action name which will be tested.
            </summary>
            <returns>Action name to be tested.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithAction.AndProvideTheActionAttributes">
            <summary>
            Gets the action attributes on the called action.
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the action.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithAction.CheckValidModelState">
            <summary>
            Checks whether the tested action's model state is valid.
            </summary>
        </member>
        <member name="P:MyWebApi.Builders.Base.BaseTestBuilderWithAction.ActionName">
            <summary>
            Gets the action name which will be tested.
            </summary>
            <value>Action name to be tested.</value>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithCaughtException">
            <summary>
            Base interface for test builders with caught exception.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithCaughtException.AndProvideTheCaughtException">
            <summary>
            Gets the thrown exception in the tested action.
            </summary>
            <returns>The exception instance or null, if no exception was caught.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithCaughtException.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Base.BaseTestBuilderWithCaughtException"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithCaughtException.AndProvideTheCaughtException">
            <summary>
            Gets the thrown exception in the tested action.
            </summary>
            <returns>The exception instance or null, if no exception was caught.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithCaughtException.NewAndProvideTestBuilder">
            <summary>
            Creates new AndProvideTestBuilder.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithActionResult`1">
            <summary>
            Base interface for all test builders with action result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithActionResult`1.AndProvideTheActionResult">
            <summary>
            Gets the tested action result.
            </summary>
            <returns>Tested action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1.AndProvideTheActionResult">
            <summary>
            Gets the action result which will be tested.
            </summary>
            <returns>Action result to be tested.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1.GetActualModel``1">
            <summary>
            Gets response model from action result.
            </summary>
            <typeparam name="TResponseModel">Type of response model.</typeparam>
            <returns>The response model.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1.NewAndTestBuilder">
            <summary>
            Initializes new instance of builder providing AndAlso method.
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1.NewAndProvideTestBuilder">
            <summary>
            Creates new AndProvideTestBuilder.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1.GetActionResultAsDynamic">
            <summary>
            Returns the actual action result casted as dynamic type.
            </summary>
            <returns>Object of dynamic type.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Base.BaseTestBuilderWithActionResult`1.ActionResult">
            <summary>
            Gets the action result which will be tested.
            </summary>
            <value>Action result to be tested.</value>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.NoActionAttributes">
            <summary>
            Checks whether the tested action has no attributes of any type. 
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ActionAttributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ActionAttributes(System.Action{MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder})">
            <summary>
            Checks whether the tested action has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ModelStateFor``1">
            <summary>
            Provides way to continue test case with specific model state errors.
            </summary>
            <typeparam name="TRequestModel">Request model type to be tested for errors.</typeparam>
            <returns>Model test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ValidModelState">
            <summary>
            Checks whether the tested action's provided model state is valid.
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.InvalidModelState(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action's provided model state is not valid.
            </summary>
            <param name="withNumberOfErrors">Expected number of errors. If default null is provided, the test builder checks only if any errors are found.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.NoActionAttributes">
            <summary>
            Checks whether the tested action has no attributes of any type. 
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ActionAttributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ActionAttributes(System.Action{MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder})">
            <summary>
            Checks whether the tested action has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ModelStateFor``1">
            <summary>
            Provides way to continue test case with specific model state errors.
            </summary>
            <typeparam name="TRequestModel">Request model type to be tested for errors.</typeparam>
            <returns>Response model test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ValidModelState">
            <summary>
            Checks whether the tested action's provided model state is valid.
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.InvalidModelState(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action's provided model state is not valid.
            </summary>
            <param name="withNumberOfErrors">Expected number of errors. If default null is provided, the test builder checks only if any errors are found.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1">
            <summary>
            Class containing methods for testing BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing ConflictResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing NegotiatedContentResult{T} or FormattedContentResult{T}.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing HttpResponseMessage result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing InternalServerErrorResult or ExceptionResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing JSON Result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing NotFoundResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing null or default value result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing RedirectResult or RedirectToRouteResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing StatusCodeResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Used for testing returned action result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing UnauthorizedResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing return type.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing OkResult and OkNegotiatedContentResult{T}.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1">
            <summary>
            Used for testing action returned result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.DefaultValue">
            <summary>
            Tests whether action result is the default value of the type.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Null">
            <summary>
            Tests whether action result is null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.NotNull">
            <summary>
            Tests whether action result is not null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.HttpResponseMessage">
            <summary>
            Tests whether action result is HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Ok">
            <summary>
            Tests whether action result is OkResult or OkNegotiatedContentResult{T}.
            </summary>
            <returns>Ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Created">
            <summary>
            Tests whether action result is CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.
            </summary>
            <returns>Created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Content">
            <summary>
            Tests whether action result is NegotiatedContentResult{T} or FormattedContentResult{T}.
            </summary>
            <returns>Content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Redirect">
            <summary>
            Tests whether action result is RedirectResult or RedirectToRouteResult.
            </summary>
            <returns>Redirect test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.StatusCode">
            <summary>
            Tests whether action result is StatusCodeResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.StatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether action result is StatusCodeResult and is the same as provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.NotFound">
            <summary>
            Tests whether action result is NotFoundResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.BadRequest">
            <summary>
            Tests whether action result is BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.
            </summary>
            <returns>Bad request test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Conflict">
            <summary>
            Tests whether action result is ConflictResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Unauthorized">
            <summary>
            Tests whether action result is UnauthorizedResult.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.InternalServerError">
            <summary>
            Tests whether action result is InternalServerErrorResult or ExceptionResult.
            </summary>
            <returns>Internal server error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Json">
            <summary>
            Tests whether action result is JSON Result.
            </summary>
            <returns>JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.ResultOfType``1">
            <summary>
            Tests whether action result is of the provided generic type.
            </summary>
            <typeparam name="TResponseModel">Expected response type.</typeparam>
            <returns>Response model details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.ResultOfType(System.Type)">
            <summary>
            Tests whether action result is of the provided type.
            </summary>
            <param name="returnType">Expected return type.</param>
            <returns>Response model details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.BadRequest">
            <summary>
            Tests whether action result is BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.
            </summary>
            <returns>Bad request test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Conflict">
            <summary>
            Tests whether action result is ConflictResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Content">
            <summary>
            Tests whether action result is NegotiatedContentResult{T} or FormattedContentResult{T}.
            </summary>
            <returns>Content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Created">
            <summary>
            Tests whether action result is CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.
            </summary>
            <returns>Created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.HttpResponseMessage">
            <summary>
            Tests whether action result is HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.InternalServerError">
            <summary>
            Tests whether action result is InternalServerErrorResult or ExceptionResult.
            </summary>
            <returns>Internal server error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Json">
            <summary>
            Tests whether action result is JSON Result.
            </summary>
            <returns>JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.NotFound">
            <summary>
            Tests whether action result is NotFoundResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.DefaultValue">
            <summary>
            Tests whether action result is the default value of the type.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Null">
            <summary>
            Tests whether action result is null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.NotNull">
            <summary>
            Tests whether action result is not null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Redirect">
            <summary>
            Tests whether action result is RedirectResult or RedirectToRouteResult.
            </summary>
            <returns>Redirect test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.StatusCode">
            <summary>
            Tests whether action result is StatusCodeResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.StatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether action result is StatusCodeResult and is the same as provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Unauthorized">
            <summary>
            Tests whether action result is UnauthorizedResult.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.ResultOfType(System.Type)">
            <summary>
            Tests whether action result is of the provided type.
            </summary>
            <param name="returnType">Expected response type.</param>
            <returns>Response model details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.ResultOfType``1">
            <summary>
            Tests whether action result is of the provided generic type.
            </summary>
            <typeparam name="TResponseModel">Expected response type.</typeparam>
            <returns>Response model test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Ok">
            <summary>
            Tests whether action result is plain OkResult.
            </summary>
            <returns>Ok test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Actions.ShouldThrowTestBuilder">
            <summary>
            Used for testing whether action throws exception.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder">
            <summary>
            Used for testing whether action throws exception.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder.Exception">
            <summary>
            Tests whether action throws any exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder.AggregateException(System.Nullable{System.Int32})">
            <summary>
            Tests whether action throws any AggregateException.
            </summary>
            <param name="withNumberOfInnerExceptions">Optional expected number of total inner exceptions.</param>
            <returns>AggregateException test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder.HttpResponseException">
            <summary>
            Tests whether action throws any HttpResponseException.
            </summary>
            <returns>HttpResponseException test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldThrowTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Actions.ShouldThrowTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldThrowTestBuilder.Exception">
            <summary>
            Tests whether action throws any exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldThrowTestBuilder.AggregateException(System.Nullable{System.Int32})">
            <summary>
            Tests whether action throws any AggregateException.
            </summary>
            <param name="withNumberOfInnerExceptions">Optional expected number of total inner exceptions.</param>
            <returns>AggregateException test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ShouldThrowTestBuilder.HttpResponseException">
            <summary>
            Tests whether action throws any HttpResponseException.
            </summary>
            <returns>HttpResponseException test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Actions.VoidActionResultTestBuilder">
            <summary>
            Used for testing void actions.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder">
            <summary>
            Used for testing void actions.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder.ShouldReturnEmpty">
            <summary>
            Tests whether action result is void.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.VoidActionResultTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Actions.VoidActionResultTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyWebApi.Builders.Actions.VoidActionResultTestBuilder.ShouldReturnEmpty">
            <summary>
            Tests whether action result is void.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.VoidActionResultTestBuilder.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.VoidActionResultTestBuilder.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.And.AndProvideTestBuilder">
            <summary>
            Provides controller and action information.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.And.AndProvideTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.And.AndProvideTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
        </member>
        <member name="T:MyWebApi.Builders.And.AndProvideTestBuilder`1">
            <summary>
            Provides controller, action and action result information.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.And.AndProvideTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.And.AndProvideTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="T:MyWebApi.Builders.And.AndTestBuilder`1">
            <summary>
            Class containing AndAlso() method allowing additional assertions after model state tests.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.And.IAndTestBuilder`1">
            <summary>
            Class containing AndAlso() method allowing additional assertions after model state tests.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.And.IAndTestBuilder`1.AndAlso">
            <summary>
            Method allowing additional assertions after the model state tests.
            </summary>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.And.AndTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.And.AndTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyWebApi.Builders.And.AndTestBuilder`1.AndAlso">
            <summary>
            Method allowing additional assertions after the model state tests.
            </summary>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder">
            <summary>
            Used for testing action attributes.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder">
            <summary>
            Base class for all attribute test builders.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder.#ctor(System.Web.Http.ApiController)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder"/> class.
            </summary>
            <param name="controller">Controller which will be tested.</param>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder.ContainingAttributeOfType``1(System.Action{System.String,System.String})">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder.ChangingRouteTo(System.String,System.Action{System.String,System.String},System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder.RestrictingForAuthorizedRequests(System.Action{System.String,System.String},System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder.GetAttributeOfType``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets an attribute of the given type from the provided collection of objects and throws exception if such is not found.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <param name="attributes">Collection of attributes.</param>
            <returns>The found attribute of the given type.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder.TryGetAttributeOfType``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets an attribute of the given type from the provided collection of objects.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <param name="attributes">Collection of attributes.</param>
            <returns>The found attribute of the given type or null, if such attribute is not found.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Attributes.BaseAttributesTestBuilder.Validations">
            <summary>
            Gets the validation actions for the tested attributes.
            </summary>
            <value>Collection of validation actions for the attributes.</value>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Attributes.IAndActionAttributesTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the attribute tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder">
            <summary>
            Used for testing action attributes.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.ChangingActionNameTo(System.String)">
            <summary>
            Checks whether the collected attributes contain ActionNameAttribute.
            </summary>
            <param name="actionName">Expected overridden name of the action.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.DisablingActionCall">
            <summary>
            Checks whether the collected attributes contain NonActionAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethod``1">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <typeparam name="THttpMethod">Attribute of type IActionHttpMethodProvider.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.String)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as string.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of strings.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.String[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as string parameters.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.Net.Http.HttpMethod})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of HttpMethod classes.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Net.Http.HttpMethod[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as parameters of HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IAndActionAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.#ctor(System.Web.Http.ApiController,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the attributes will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.ChangingActionNameTo(System.String)">
            <summary>
            Checks whether the collected attributes contain ActionNameAttribute.
            </summary>
            <param name="actionName">Expected overridden name of the action.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.DisablingActionCall">
            <summary>
            Checks whether the collected attributes contain NonActionAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethod``1">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <typeparam name="THttpMethod">Attribute of type IActionHttpMethodProvider.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.String)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as string.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of strings.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.String[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as string parameters.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.Net.Http.HttpMethod})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of HttpMethod classes.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Net.Http.HttpMethod[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as parameters of HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ActionAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder">
            <summary>
            Used for testing controller attributes.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Attributes.IAndControllerAttributesTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the attribute tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder">
            <summary>
            Used for testing controller attributes.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the controller.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.ChangingRoutePrefixTo(System.String)">
            <summary>
            Checks whether the collected attributes contain RoutePrefixAttribute.
            </summary>
            <param name="prefix">Expected overridden route prefix of the controller.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Attributes.IAndControllerAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder.#ctor(System.Web.Http.ApiController)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder"/> class.
            </summary>
            <param name="controller">Controller which will be tested.</param>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder.ChangingRoutePrefixTo(System.String)">
            <summary>
            Checks whether the collected attributes contain RoutePrefixAttribute.
            </summary>
            <param name="prefix">Expected overridden route prefix of the controller.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Attributes.ControllerAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Controllers.IControllerTestBuilder">
            <summary>
            Used for testing controllers.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerTestBuilder.NoAttributes">
            <summary>
            Checks whether the tested controller has no attributes of any type. 
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerTestBuilder.Attributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested controller has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerTestBuilder.Attributes(System.Action{MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder})">
            <summary>
            Checks whether the tested controller has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.ExceptionErrors.IAggregateExceptionTestBuilder">
            <summary>
            Used for testing AggregateException.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder">
            <summary>
            Used for testing expected exception messages.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder.WithMessage">
            <summary>
            Tests exception message using test builder.
            </summary>
            <returns>Exception message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder.WithMessage(System.String)">
            <summary>
            Tests exception message whether it is equal to the provided message as string.
            </summary>
            <param name="message">Expected exception message as string.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IAggregateExceptionTestBuilder.ContainingInnerExceptionOfType``1">
            <summary>
            Tests whether AggregateException contains inner exception of the provided type.
            </summary>
            <typeparam name="TInnerException">Expected inner exception type.</typeparam>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.ExceptionErrors.IAndAggregateExceptionTestBuilder">
            <summary>
            Used for adding AndAlso() method to the aggregate exception tests.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IAndAggregateExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining aggregate exception tests.
            </summary>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IAndOkTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the ok response tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder">
            <summary>
            Used for testing ok result.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Models.IBaseResponseModelTestBuilder">
            <summary>
            Base interface for all response model test builders.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IBaseResponseModelTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether response model is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IBaseResponseModelTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether an object is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithNoResponseModel">
            <summary>
            Tests whether no response model is returned from the invoked action.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithDefaultContentNegotiator">
            <summary>
            Tests whether ok result has the default content negotiator.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether ok result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether ok result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether ok result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether ok result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingDefaultFormatters">
            <summary>
            Tests whether ok result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatters(System.Action{MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether ok result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Ok.IAndOkTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining ok tests.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpRequests.IAndHttpRequestMessageBuilder">
            <summary>
            Used for adding AndAlso() method to the the HTTP request message builder.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder">
            <summary>
            Used for building HTTP request message.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithContent(System.Net.Http.HttpContent)">
            <summary>
            Adds HTTP content to the built HTTP request message.
            </summary>
            <param name="content">HTTP content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStreamContent(System.IO.Stream)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStreamContent(System.IO.Stream,System.Int32)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <param name="bufferSize">Buffer size of the added HTTP stream content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithByteArrayContent(System.Byte[])">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithByteArrayContent(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <param name="offset">Offset in the HTTP byte array content.</param>
            <param name="count">The number of bytes in the HTTP byte array content to use.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithFormUrlEncodedContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds HTTP form URL encoded content to the built HTTP request message.
            </summary>
            <param name="nameValueCollection">Name value pairs collection.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStringContent(System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding,System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <param name="mediaType">Type of media to use in the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithHeader(System.String,System.String)">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of headers to the built HTTP request message.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithHeaders(System.Net.Http.Headers.HttpRequestHeaders)">
            <summary>
            Adds headers to the built HTTP request message.
            </summary>
            <param name="headers">Headers represented by HttpRequestHeaders type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithMethod(System.String)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by HttpMethod type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithRequestUri(System.String)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithRequestUri(System.Uri)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithRequestUri(System.Action{MyWebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Adds request location provided by a builder to the HTTP request message.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithVersion(System.String)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="major">Major number in the provided version.</param>
            <param name="minor">Minor number in the provided version.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithVersion(System.Version)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by Version type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpRequests.IAndHttpRequestMessageBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building HTTP request message.
            </summary>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpResponseMessages.IAndHttpResponseMessageTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the HTTP response message tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder">
            <summary>
            Used for testing HTTP response message results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the HTTP response message content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether an object is returned from the HTTP response message content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithContentOfType``1">
            <summary>
            Tests whether the content of the HTTP response message is of certain type.
            </summary>
            <typeparam name="TContentType">Type of expected HTTP content.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether the HTTP response message has the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithMediaTypeFormatterOfType``1">
            <summary>
            Tests whether the HTTP response message has the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithDefaultMediaTypeFormatter">
            <summary>
            Tests whether the HTTP response message contains the default media type formatter provided by the framework.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name.
            </summary>
            <param name="name">Name of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="value">Value of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="values">Collection of values in the expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains response headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeaders(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Tests whether the HTTP response message contains response headers.
            </summary>
            <param name="headers">HTTP response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether HTTP response message status code is the same as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">Expected status code.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithVersion(System.String)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version as string.
            </summary>
            <param name="version">Expected version as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="major">Major number in the expected version.</param>
            <param name="minor">Minor number in the expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithVersion(System.Version)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="version">Expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithReasonPhrase(System.String)">
            <summary>
            Tests whether HTTP response message reason phrase is the same as the provided reason phrase as string.
            </summary>
            <param name="reasonPhrase">Expected reason phrase as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithSuccessStatusCode">
            <summary>
            Tests whether HTTP response message returns success status code between 200 and 299.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpResponseMessages.IAndHttpResponseMessageTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Controllers.ControllerTestBuilder">
            <summary>
            Used for testing controllers.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerTestBuilder.#ctor(System.Web.Http.ApiController,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Controllers.ControllerTestBuilder"/> class.
            </summary>
            <param name="controller">Controller which will be tested.</param>
            <param name="controllerAttributes">Collected attributes from the tested controller.</param>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerTestBuilder.NoAttributes">
            <summary>
            Checks whether the tested controller has no attributes of any type. 
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerTestBuilder.Attributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested controller has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerTestBuilder.Attributes(System.Action{MyWebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder})">
            <summary>
            Checks whether the tested controller has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder">
            <summary>
            Used for testing AggregateException.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.ExceptionErrors.ExceptionTestBuilder">
            <summary>
            Used for testing expected exceptions.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.ExceptionErrors.IAndExceptionTestBuilder">
            <summary>
            Used for adding AndAlso() method to the expected exception tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.ExceptionErrors.IExceptionTestBuilder">
            <summary>
            Used for testing expected exceptions.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IExceptionTestBuilder.OfType``1">
            <summary>
            Tests whether certain type of exception is returned from the invoked action.
            </summary>
            <typeparam name="TException">Type of the expected exception.</typeparam>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IAndExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining expected exception tests.
            </summary>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.ExceptionErrors.ExceptionTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="exception">Actual received exception.</param>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionTestBuilder.OfType``1">
            <summary>
            Tests whether certain type of exception is returned from the invoked action.
            </summary>
            <typeparam name="TException">Type of the expected exception.</typeparam>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionTestBuilder.WithMessage">
            <summary>
            Tests exception message using test builder.
            </summary>
            <returns>Exception message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionTestBuilder.WithMessage(System.String)">
            <summary>
            Tests exception message whether it is equal to the provided message as string.
            </summary>
            <param name="message">Expected exception message as string.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining expected exception tests.
            </summary>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.AggregateException)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Actual received aggregate exception.</param>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder.ContainingInnerExceptionOfType``1">
            <summary>
            Tests whether AggregateException contains inner exception of the provided type.
            </summary>
            <typeparam name="TInnerException">Expected inner exception type.</typeparam>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining aggregate exception tests.
            </summary>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder">
            <summary>
            Used for testing specific bad request error messages.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder">
            <summary>
            Used for testing specific bad request error messages.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actualMessage">Actual error message received from bad request result.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1">
            <summary>
            Used for testing bad request results.
            </summary>
            <typeparam name="TBadRequestResult">Type of bad request result - BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder">
            <summary>
            Used for testing bad request results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithErrorMessage">
            <summary>
            Tests bad request result with specific error message using test builder.
            </summary>
            <returns>Bad request with error message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithErrorMessage(System.String)">
            <summary>
            Tests bad request result with specific error message provided by string.
            </summary>
            <param name="message">Expected error message from bad request result.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithModelState(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Tests bad request result with specific model state dictionary.
            </summary>
            <param name="modelState">Model state dictionary to deeply compare to the actual one.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithModelStateFor``1">
            <summary>
            Tests bad request result for model state errors using test builder.
            </summary>
            <typeparam name="TRequestModel">Type of model for which the model state errors will be tested.</typeparam>
            <returns>Model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithErrorMessage">
            <summary>
            Tests bad request result with specific error message using test builder.
            </summary>
            <returns>Bad request with error message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithErrorMessage(System.String)">
            <summary>
            Tests bad request result with specific error message provided by string.
            </summary>
            <param name="message">Expected error message from bad request result.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithModelState(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Tests bad request result with specific model state dictionary.
            </summary>
            <param name="modelState">Model state dictionary to deeply compare to the actual one.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithModelStateFor``1">
            <summary>
            Tests bad request result for model state errors using test builder.
            </summary>
            <typeparam name="TRequestModel">Type of model for which the model state errors will be tested.</typeparam>
            <returns>Model error test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Base.BaseTestBuilderWithModel`1">
            <summary>
            Base class for all test builders with model.
            </summary>
            <typeparam name="TModel">Model returned from action result.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithModel`1">
            <summary>
            Base interface for all test builders with model.
            </summary>
            <typeparam name="TModel">Model returned from action result.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Base.IBaseTestBuilderWithModel`1.AndProvideTheModel">
            <summary>
            Gets the model returned from an action result.
            </summary>
            <returns>Model returned from action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithModel`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Base.BaseTestBuilderWithModel`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="model">Model returned from action result.</param>
        </member>
        <member name="M:MyWebApi.Builders.Base.BaseTestBuilderWithModel`1.AndProvideTheModel">
            <summary>
            Gets the model returned from an action result.
            </summary>
            <returns>Model returned from action result.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1">
            <summary>
            Used for testing content result.
            </summary>
            <typeparam name="TContentResult">Type of content result - NegotiatedContentResult{T} or FormattedContentResult{T}.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Models.BaseResponseModelTestBuilder`1">
            <summary>
            Base class for all response model test builders.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Models.BaseResponseModelTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Models.BaseResponseModelTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.Models.BaseResponseModelTestBuilder`1.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.BaseResponseModelTestBuilder`1.WithResponseModel``1(``0)">
            <summary>
            Tests whether an object is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Content.IAndContentTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the content response tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder">
            <summary>
            Used for testing content result.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether content result has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithMediaType(System.String)">
            <summary>
            Tests whether content result has the same content type as the provided string.
            </summary>
            <param name="mediaType">Media type as string.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithMediaType(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Tests whether content result has the same content type as the provided MediaTypeHeaderValue.
            </summary>
            <param name="mediaType">Media type as MediaTypeHeaderValue.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithDefaultContentNegotiator">
            <summary>
            Tests whether content result has the default content negotiator.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether content result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether content result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingDefaultFormatters">
            <summary>
            Tests whether created result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatters(System.Action{MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether created result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Content.IAndContentTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining content tests.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether content result has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithMediaType(System.String)">
            <summary>
            Tests whether content result has the same content type as the provided string.
            </summary>
            <param name="mediaType">Media type as string.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithMediaType(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Tests whether content result has the same content type as the provided MediaTypeHeaderValue.
            </summary>
            <param name="mediaType">Media type as MediaTypeHeaderValue.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithDefaultContentNegotiator">
            <summary>
            Tests whether content result has the default content negotiator.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether content result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether content result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether content result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether content result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingDefaultFormatters">
            <summary>
            Tests whether content result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether content result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether content result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatters(System.Action{MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether content result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining content tests.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Created.IAndCreatedTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the created response tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder">
            <summary>
            Used for testing created results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.WithDefaultContentNegotiator">
            <summary>
            Tests whether created result has the default content negotiator.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether created result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether created result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocation(System.String)">
            <summary>
            Tests whether created result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocation(System.Uri)">
            <summary>
            Tests whether created result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocation(System.Action{MyWebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether created result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingDefaultFormatters">
            <summary>
            Tests whether created result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatters(System.Action{MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether created result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Created.IAndCreatedTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining created tests.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Formatters.IAndFormattersBuilder">
            <summary>
            Used for adding AndAlso() method to the the formatter tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder">
            <summary>
            Used for testing media type formatters in a created result.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Instance of MediaTypeFormatter.</param>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Instance of MediaTypeFormatter.</typeparam>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Formatters.IAndFormattersBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining formatters tests.
            </summary>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Uris.IAndUriTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the URI tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Uris.IUriTestBuilder">
            <summary>
            Used for testing URI location in a created result.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Uris.IUriTestBuilder.WithHost(System.String)">
            <summary>
            Tests whether the URI has the same host as the provided one.
            </summary>
            <param name="host">Host part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Uris.IUriTestBuilder.WithPort(System.Int32)">
            <summary>
            Tests whether the URI has the same port as the provided one.
            </summary>
            <param name="port">Port part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Uris.IUriTestBuilder.WithAbsolutePath(System.String)">
            <summary>
            Tests whether the URI has the same absolute path as the provided one.
            </summary>
            <param name="absolutePath">Absolute path part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Uris.IUriTestBuilder.WithScheme(System.String)">
            <summary>
            Tests whether the URI has the same scheme as the provided one.
            </summary>
            <param name="scheme">Scheme part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Uris.IUriTestBuilder.WithQuery(System.String)">
            <summary>
            Tests whether the URI has the same query as the provided one.
            </summary>
            <param name="query">Query part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Uris.IUriTestBuilder.WithFragment(System.String)">
            <summary>
            Tests whether the URI has the same fragment as the provided one.
            </summary>
            <param name="fragment">Document fragment part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Uris.IAndUriTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining URI tests.
            </summary>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Controllers.IAndControllerBuilder`1">
            <summary>
            Used for adding AndAlso() method to controller builder.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1">
            <summary>
            Used for building the action which will be tested.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.ShouldHave">
            <summary>
            Used for testing controller attributes.
            </summary>
            <returns>Controller test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.WithHttpRequestMessage(System.Action{MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested controller.
            </summary>
            <param name="httpRequestBuilder">Builder for HTTP request message.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.WithResolvedDependencyFor``1(``0)">
            <summary>
            Tries to resolve constructor dependency of given type.
            </summary>
            <typeparam name="TDependency">Type of dependency to resolve.</typeparam>
            <param name="dependency">Instance of dependency to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.WithResolvedDependencies(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Tries to resolve constructor dependencies by the provided collection of dependencies.
            </summary>
            <param name="dependencies">Collection of dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.WithResolvedDependencies(System.Object[])">
            <summary>
            Tries to resolve constructor dependencies by the provided dependencies.
            </summary>
            <param name="dependencies">Dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.WithoutValidation">
            <summary>
            Disables ModelState validation for the action call.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.WithAuthenticatedUser">
            <summary>
            Sets default authenticated user to the built controller with "TestUser" username.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.WithAuthenticatedUser(System.Action{MyWebApi.Builders.Contracts.IUserBuilder})">
            <summary>
            Sets custom authenticated user using provided user builder.
            </summary>
            <param name="userBuilder">User builder to create mocked user object.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.Calling``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Type of result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.CallingAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Asynchronous Task result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.Calling(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.CallingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.Controller">
            <summary>
            Gets ASP.NET Web API controller instance to be tested.
            </summary>
            <value>Instance of the ASP.NET Web API controller.</value>
        </member>
        <member name="P:MyWebApi.Builders.Contracts.Controllers.IControllerBuilder`1.HttpRequestMessage">
            <summary>
            Gets the HTTP request message used in the testing.
            </summary>
            <value>Instance HttpRequestMessage.</value>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Controllers.IAndControllerBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when building controller instance.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder">
            <summary>
            Used for testing specific exception messages.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular exception message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular exception message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular exception message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular exception message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.ExceptionErrors.IHttpResponseExceptionTestBuilder">
            <summary>
            Used for testing expected HttpResponseException.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IHttpResponseExceptionTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether caught HttpResponseException has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.ExceptionErrors.IHttpResponseExceptionTestBuilder.WithHttpResponseMessage">
            <summary>
            Provides methods to test whether caught HttpResponseException has specific HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.InternalServerError.IInternalServerErrorTestBuilder">
            <summary>
            Used for testing internal server error results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.InternalServerError.IInternalServerErrorTestBuilder.WithException">
            <summary>
            Tests internal server error whether it contains exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.InternalServerError.IInternalServerErrorTestBuilder.WithException(System.Exception)">
            <summary>
            Tests internal server error whether it contains exception with the same type and having the same message as the provided exception.
            </summary>
            <param name="exception">Expected exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonSerializerSettingsTestBuilder">
            <summary>
            Used for testing JSON serializer settings in a JSON result with AndAlso() method.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder">
            <summary>
            Used for testing JSON serializer settings in a JSON result.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithCulture(System.Globalization.CultureInfo)">
            <summary>
            Tests the Culture property in a JSON serializer settings object.
            </summary>
            <param name="culture">Expected Culture.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithContractResolver(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object.
            </summary>
            <param name="contractResolver">Expected ContractResolver.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithContractResolverOfType``1">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object by using generic type.
            </summary>
            <typeparam name="TContractResolver">Expected ContractResolver type.</typeparam>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithConstructorHandling(Newtonsoft.Json.ConstructorHandling)">
            <summary>
            Tests the ConstructorHandling property in a JSON serializer settings object.
            </summary>
            <param name="constructorHandling">Expected ConstructorHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDateFormatHandling(Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Tests the DateFormatHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateFormatHandling">Expected DateFormatHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDateParseHandling(Newtonsoft.Json.DateParseHandling)">
            <summary>
            Tests the DateParseHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateParseHandling">Expected DateParseHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDateTimeZoneHandling(Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Tests the WithDateTimeZoneHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateTimeZoneHandling">Expected WithDateTimeZoneHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDefaultValueHandling(Newtonsoft.Json.DefaultValueHandling)">
            <summary>
            Tests the DefaultValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="defaultValueHandling">Expected DefaultValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithFormatting(Newtonsoft.Json.Formatting)">
            <summary>
            Tests the Formatting property in a JSON serializer settings object.
            </summary>
            <param name="formatting">Expected Formatting.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithMaxDepth(System.Nullable{System.Int32})">
            <summary>
            Tests the MaxDepth property in a JSON serializer settings object.
            </summary>
            <param name="maxDepth">Expected max depth.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithMissingMemberHandling(Newtonsoft.Json.MissingMemberHandling)">
            <summary>
            Tests the MissingMemberHandling property in a JSON serializer settings object.
            </summary>
            <param name="missingMemberHandling">Expected MissingMemberHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithNullValueHandling(Newtonsoft.Json.NullValueHandling)">
            <summary>
            Tests the NullValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="nullValueHandling">Expected NullValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithObjectCreationHandling(Newtonsoft.Json.ObjectCreationHandling)">
            <summary>
            Tests the ObjectCreationHandling property in a JSON serializer settings object.
            </summary>
            <param name="objectCreationHandling">Expected ObjectCreationHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithPreserveReferencesHandling(Newtonsoft.Json.PreserveReferencesHandling)">
            <summary>
            Tests the PreserveReferencesHandling property in a JSON serializer settings object.
            </summary>
            <param name="preserveReferencesHandling">Expected PreserveReferencesHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithReferenceLoopHandling(Newtonsoft.Json.ReferenceLoopHandling)">
            <summary>
            Tests the ReferenceLoopHandling property in a JSON serializer settings object.
            </summary>
            <param name="referenceLoopHandling">Expected ReferenceLoopHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithTypeNameAssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)">
            <summary>
            Tests the FormatterAssemblyStyle property in a JSON serializer settings object.
            </summary>
            <param name="typeNameAssemblyFormat">Expected FormatterAssemblyStyle.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithTypeNameHandling(Newtonsoft.Json.TypeNameHandling)">
            <summary>
            Tests the TypeNameHandling property in a JSON serializer settings object.
            </summary>
            <param name="typeNameHandling">Expected TypeNameHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonSerializerSettingsTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON serializer settings test builder.
            </summary>
            <returns>JSON serializer settings test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the JSON response tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder">
            <summary>
            Used for testing JSON results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithDefaultEncoding">
            <summary>
            Tests whether JSON result has the default UTF8 encoding.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithEncoding(System.Text.Encoding)">
            <summary>
            Tests whether JSON result has the provided encoding.
            </summary>
            <param name="encoding">Expected encoding to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithDefaulJsonSerializerSettings">
            <summary>
            Tests whether JSON result has the default JSON serializer settings.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Tests whether JSON result has the provided JSON serializer settings.
            </summary>
            <param name="jsonSerializerSettings">Expected JSON serializer settings to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithJsonSerializerSettings(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder})">
            <summary>
            Tests whether JSON result has JSON serializer settings by using builder.
            </summary>
            <param name="jsonSerializerSettingsBuilder">Builder for creating JSON serializer settings.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON result tests.
            </summary>
            <returns>JSON result test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Models.IAndModelErrorTestBuilder`1">
            <summary>
            Used for adding AndAlso() method to the the model error tests.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1">
            <summary>
            Used for testing model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Models.IModelErrorTestBuilder">
            <summary>
            Used for testing model errors.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorTestBuilder.ContainingNoModelStateErrors">
            <summary>
            Tests whether tested action's model state is valid.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>This instance in order to support method chaining.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IAndModelErrorTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder">
            <summary>
            Used for testing redirect results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocation(System.String)">
            <summary>
            Tests whether created result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocation(System.Uri)">
            <summary>
            Tests whether created result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocation(System.Action{MyWebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether created result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndChallengesBuilder">
            <summary>
            Used for building collection of AuthenticationHeaderValue with AndAlso() method.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder">
            <summary>
            Used for building collection of AuthenticationHeaderValue.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder.ContainingHeader(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Adds built header to the collection of authentication header values.
            </summary>
            <param name="authenticationHeaderValueBuilder">Action providing authentication header value builder.</param>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndChallengesBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining header builders.
            </summary>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndUnauthorizedTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the unauthorized response tests.
            </summary>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder">
            <summary>
            Used for testing the authenticated header challenges in unauthorized results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(MyWebApi.AuthenticationScheme)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided default scheme.
            </summary>
            <param name="scheme">Enumeration containing default schemes.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided scheme as string.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String,System.String)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided scheme and parameter.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <param name="parameter">Parameter as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided authenticated header value.
            </summary>
            <param name="challenge">AuthenticationHeaderValue containing scheme and parameter.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Tests whether an unauthorized result contains authenticated header using the provided authenticated header value builder.
            </summary>
            <param name="challengeBuilder">Builder for creating AuthenticationHeaderValue.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <summary>
            Tests whether an unauthorized result has exactly the same authenticated header values as the provided collection.
            </summary>
            <param name="challenges">Collection of authenticated header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <summary>
            Tests whether an unauthorized result has exactly the same authenticated header values as the provided ones as parameters.
            </summary>
            <param name="challenges">Parameters of authenticated header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder})">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided ones from the challenges builder.
            </summary>
            <param name="challengesBuilder">Builder for creating collection of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndUnauthorizedTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining unauthorized result tests.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueParameterBuilder">
            <summary>
            Used for building mocked AuthenticationHeaderValue parameter.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueParameterBuilder.WithParameter(System.String)">
            <summary>
            Sets parameter to the built authentication header value with the provided string.
            </summary>
            <param name="parameter">Authentication header value parameter as string.</param>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder">
            <summary>
            Used for building mocked AuthenticationHeaderValue scheme.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder.WithScheme(MyWebApi.AuthenticationScheme)">
            <summary>
            Sets scheme to the built authentication header value with the provided AuthenticationScheme enumeration.
            </summary>
            <param name="scheme">Enumeration with default authentication header schemes.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder.WithScheme(System.String)">
            <summary>
            Sets scheme to the built authentication header value with the provided string.
            </summary>
            <param name="scheme">Authentication header scheme as string.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1">
            <summary>
            Used for building the action result which will be tested.
            </summary>
            <typeparam name="TActionResult">Type of action result to be tested.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1.ShouldReturn">
            <summary>
            Used for testing returned action result.
            </summary>
            <returns>Should return test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1">
            <summary>
            Used for testing specific model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.Models.IModelDetailsTestBuilder`1">
            <summary>
            Used for testing the response model members.
            </summary>
            <typeparam name="TResponseModel">Response model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelDetailsTestBuilder`1.Passing(System.Action{`0})">
            <summary>
            Tests whether the returned response model from the invoked action passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.Models.IModelDetailsTestBuilder`1.Passing(System.Func{`0,System.Boolean})">
            <summary>
            Tests whether the returned response model from the invoked action passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Contracts.IUserBuilder">
            <summary>
            Used for building mocked Controller.User object.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.IUserBuilder.WithUsername(System.String)">
            <summary>
            Used for setting username to the mocked user object.
            </summary>
            <param name="username">The username to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.IUserBuilder.WithAuthenticationType(System.String)">
            <summary>
            Used for setting authentication type to the mocked user object.
            </summary>
            <param name="authenticationType">The authentication type to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.IUserBuilder.InRole(System.String)">
            <summary>
            Used for adding user role to the mocked user object.
            </summary>
            <param name="role">The user role to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.IUserBuilder.InRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Collection of roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Contracts.IUserBuilder.InRoles(System.String[])">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Controllers.ControllerBuilder`1">
            <summary>
            Used for building the action which will be tested.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Controllers.ControllerBuilder`1"/> class.
            </summary>
            <param name="controllerInstance">Instance of the tested ASP.NET Web API controller.</param>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.WithHttpRequestMessage(System.Action{MyWebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested controller.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.WithResolvedDependencyFor``1(``0)">
            <summary>
            Tries to resolve constructor dependency of given type.
            </summary>
            <typeparam name="TDependency">Type of dependency to resolve.</typeparam>
            <param name="dependency">Instance of dependency to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.WithResolvedDependencies(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Tries to resolve constructor dependencies by the provided collection of dependencies.
            </summary>
            <param name="dependencies">Collection of dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.WithResolvedDependencies(System.Object[])">
            <summary>
            Tries to resolve constructor dependencies by the provided dependencies.
            </summary>
            <param name="dependencies">Dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.WithoutValidation">
            <summary>
            Disables ModelState validation for the action call.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.WithAuthenticatedUser">
            <summary>
            Sets default authenticated user to the built controller with "TestUser" username.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.WithAuthenticatedUser(System.Action{MyWebApi.Builders.Contracts.IUserBuilder})">
            <summary>
            Sets custom authenticated user using provided user builder.
            </summary>
            <param name="userBuilder">User builder to create mocked user object.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.ShouldHave">
            <summary>
            Used for testing controller attributes.
            </summary>
            <returns>Controller test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when building controller instance.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.Calling``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Type of result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.CallingAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Asynchronous Task result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.Calling(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Controllers.ControllerBuilder`1.CallingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Controllers.ControllerBuilder`1.Controller">
            <summary>
            Gets the ASP.NET Web API controller instance to be tested.
            </summary>
            <value>Instance of the ASP.NET Web API controller.</value>
        </member>
        <member name="P:MyWebApi.Builders.Controllers.ControllerBuilder`1.HttpRequestMessage">
            <summary>
            Gets the HTTP request message used in the testing.
            </summary>
            <value>Instance HttpRequestMessage.</value>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1">
            <summary>
            Used for testing created results.
            </summary>
            <typeparam name="TCreatedResult">Type of created result - CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.WithDefaultContentNegotiator">
            <summary>
            Tests whether created result has the default content negotiator.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether created result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether created result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocation(System.String)">
            <summary>
            Tests whether created result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocation(System.Uri)">
            <summary>
            Tests whether created result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocation(System.Action{MyWebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether created result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingDefaultFormatters">
            <summary>
            Tests whether created result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatters(System.Action{MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether created result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining created tests.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.FormattersBuilder">
            <summary>
            Used for testing media type formatters in a created result.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.FormattersBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.FormattersBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.FormattersBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Instance of MediaTypeFormatter.</param>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.FormattersBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Instance of MediaTypeFormatter.</typeparam>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.FormattersBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining formatters tests.
            </summary>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpRequestMessageBuilder">
            <summary>
            Used for building HTTP request message.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpRequestMessageBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithContent(System.Net.Http.HttpContent)">
            <summary>
            Adds HTTP content to the built HTTP request message.
            </summary>
            <param name="content">HTTP content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithStreamContent(System.IO.Stream)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithStreamContent(System.IO.Stream,System.Int32)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <param name="bufferSize">Buffer size of the added HTTP stream content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithByteArrayContent(System.Byte[])">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithByteArrayContent(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <param name="offset">Offset in the HTTP byte array content.</param>
            <param name="count">The number of bytes in the HTTP byte array content to use.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithFormUrlEncodedContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds HTTP form URL encoded content to the built HTTP request message.
            </summary>
            <param name="nameValueCollection">Name value pairs collection.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithStringContent(System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding,System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <param name="mediaType">Type of media to use in the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithHeader(System.String,System.String)">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of headers to the built HTTP request message.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithHeaders(System.Net.Http.Headers.HttpRequestHeaders)">
            <summary>
            Adds headers to the built HTTP request message.
            </summary>
            <param name="headers">Headers represented by HttpRequestHeaders type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithMethod(System.String)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by HttpMethod type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithRequestUri(System.String)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithRequestUri(System.Uri)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithRequestUri(System.Action{MyWebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Adds request location provided by a builder to the HTTP request message.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithVersion(System.String)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="major">Major number in the provided version.</param>
            <param name="minor">Minor number in the provided version.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.WithVersion(System.Version)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by Version type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpRequestMessageBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building HTTP request message.
            </summary>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpResponseMessageTestBuilder">
            <summary>
            Used for testing HTTP response message results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpResponseMessageTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">HTTP response result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the HTTP response message content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether an object is returned from the invoked HTTP response message content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithContentOfType``1">
            <summary>
            Tests whether the content of the HTTP response message is of certain type.
            </summary>
            <typeparam name="TContentType">Type of expected HTTP content.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether the HTTP response message has the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithMediaTypeFormatterOfType``1">
            <summary>
            Tests whether the HTTP response message has the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithDefaultMediaTypeFormatter">
            <summary>
            Tests whether the HTTP response message contains the default media type formatter provided by the framework.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.ContainingHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name.
            </summary>
            <param name="name">Name of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.ContainingHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="value">Value of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.ContainingHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="values">Collection of values in the expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.ContainingHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains response headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.ContainingHeaders(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Tests whether the HTTP response message contains response headers.
            </summary>
            <param name="headers">HTTP response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether HTTP response message status code is the same as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">Expected status code.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithVersion(System.String)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version as string.
            </summary>
            <param name="version">Expected version as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="major">Major number in the expected version.</param>
            <param name="minor">Minor number in the expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithVersion(System.Version)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="version">Expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithReasonPhrase(System.String)">
            <summary>
            Tests whether HTTP response message reason phrase is the same as the provided reason phrase as string.
            </summary>
            <param name="reasonPhrase">Expected reason phrase as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.WithSuccessStatusCode">
            <summary>
            Tests whether HTTP response message returns success status code between 200 and 299.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpResponseMessageTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Uris.MockedUriBuilder">
            <summary>
            Used for creating URI.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Uris.MockedUriBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.WithHost(System.String)">
            <summary>
            Adds host to the built URI.
            </summary>
            <param name="host">Host part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.WithPort(System.Int32)">
            <summary>
            Adds port to the built URI.
            </summary>
            <param name="port">Port part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.WithAbsolutePath(System.String)">
            <summary>
            Adds absolute path to the built URI.
            </summary>
            <param name="absolutePath">Absolute path part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.WithScheme(System.String)">
            <summary>
            Adds scheme to the built URI.
            </summary>
            <param name="scheme">Scheme part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.WithQuery(System.String)">
            <summary>
            Adds query string to the built URI.
            </summary>
            <param name="query">Query part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.WithFragment(System.String)">
            <summary>
            Adds fragment to the built URI.
            </summary>
            <param name="fragment">Document fragment part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining URI builder.
            </summary>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Uris.MockedUriBuilder.MockedUri">
            <summary>
            Gets the built mocked URI instance.
            </summary>
            <value>Mocked URI.</value>
        </member>
        <member name="T:MyWebApi.Builders.Uris.MockedUriTestBuilder">
            <summary>
            Used for testing URI location in a created result.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriTestBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Uris.MockedUriTestBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriTestBuilder.WithHost(System.String)">
            <summary>
            Tests whether the URI has the same host as the provided one.
            </summary>
            <param name="host">Host part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriTestBuilder.WithPort(System.Int32)">
            <summary>
            Tests whether the URI has the same port as the provided one.
            </summary>
            <param name="port">Port part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriTestBuilder.WithAbsolutePath(System.String)">
            <summary>
            Tests whether the URI has the same absolute path as the provided one.
            </summary>
            <param name="absolutePath">Absolute path part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriTestBuilder.WithScheme(System.String)">
            <summary>
            Tests whether the URI has the same scheme as the provided one.
            </summary>
            <param name="scheme">Scheme part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriTestBuilder.WithQuery(System.String)">
            <summary>
            Tests whether the URI has the same query as the provided one.
            </summary>
            <param name="query">Query part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Uris.MockedUriTestBuilder.WithFragment(System.String)">
            <summary>
            Tests whether the URI has the same fragment as the provided one.
            </summary>
            <param name="fragment">Document fragment part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder">
            <summary>
            Used for testing specific exception messages.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,MyWebApi.Builders.Contracts.ExceptionErrors.IAndExceptionTestBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="exceptionTestBuilder">Original exception test builder.</param>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular exception message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular exception message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular exception message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular exception message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder">
            <summary>
            Used for testing expected HttpResponseException.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Web.Http.HttpResponseException)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Actual received HttpResponseException.</param>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether caught HttpResponseException has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder.WithHttpResponseMessage">
            <summary>
            Provides methods to test whether caught HttpResponseException has specific HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1">
            <summary>
            Used for testing internal server error results.
            </summary>
            <typeparam name="TInternalServerErrorResult">Type of internal server error result - InternalServerErrorResult or ExceptionResult.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1.WithException">
            <summary>
            Tests internal server error whether it contains exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1.WithException(System.Exception)">
            <summary>
            Tests internal server error whether it contains exception with the same type and having the same message as the provided exception.
            </summary>
            <param name="exception">Expected exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder">
            <summary>
            Used for testing JSON serializer settings in a JSON result.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.#ctor(System.Web.Http.ApiController,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithCulture(System.Globalization.CultureInfo)">
            <summary>
            Tests the Culture property in a JSON serializer settings object.
            </summary>
            <param name="culture">Expected Culture.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithContractResolver(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object.
            </summary>
            <param name="contractResolver">Expected ContractResolver.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithContractResolverOfType``1">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object by using generic type.
            </summary>
            <typeparam name="TContractResolver">Expected ContractResolver type.</typeparam>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithConstructorHandling(Newtonsoft.Json.ConstructorHandling)">
            <summary>
            Tests the ConstructorHandling property in a JSON serializer settings object.
            </summary>
            <param name="constructorHandling">Expected ConstructorHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDateFormatHandling(Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Tests the DateFormatHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateFormatHandling">Expected DateFormatHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDateParseHandling(Newtonsoft.Json.DateParseHandling)">
            <summary>
            Tests the DateParseHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateParseHandling">Expected DateParseHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDateTimeZoneHandling(Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Tests the WithDateTimeZoneHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateTimeZoneHandling">Expected WithDateTimeZoneHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDefaultValueHandling(Newtonsoft.Json.DefaultValueHandling)">
            <summary>
            Tests the DefaultValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="defaultValueHandling">Expected DefaultValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithFormatting(Newtonsoft.Json.Formatting)">
            <summary>
            Tests the Formatting property in a JSON serializer settings object.
            </summary>
            <param name="formatting">Expected Formatting.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithMaxDepth(System.Nullable{System.Int32})">
            <summary>
            Tests the MaxDepth property in a JSON serializer settings object.
            </summary>
            <param name="maxDepth">Expected max depth.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithMissingMemberHandling(Newtonsoft.Json.MissingMemberHandling)">
            <summary>
            Tests the MissingMemberHandling property in a JSON serializer settings object.
            </summary>
            <param name="missingMemberHandling">Expected MissingMemberHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithNullValueHandling(Newtonsoft.Json.NullValueHandling)">
            <summary>
            Tests the NullValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="nullValueHandling">Expected NullValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithObjectCreationHandling(Newtonsoft.Json.ObjectCreationHandling)">
            <summary>
            Tests the ObjectCreationHandling property in a JSON serializer settings object.
            </summary>
            <param name="objectCreationHandling">Expected ObjectCreationHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithPreserveReferencesHandling(Newtonsoft.Json.PreserveReferencesHandling)">
            <summary>
            Tests the PreserveReferencesHandling property in a JSON serializer settings object.
            </summary>
            <param name="preserveReferencesHandling">Expected PreserveReferencesHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithReferenceLoopHandling(Newtonsoft.Json.ReferenceLoopHandling)">
            <summary>
            Tests the ReferenceLoopHandling property in a JSON serializer settings object.
            </summary>
            <param name="referenceLoopHandling">Expected ReferenceLoopHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithTypeNameAssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)">
            <summary>
            Tests the FormatterAssemblyStyle property in a JSON serializer settings object.
            </summary>
            <param name="typeNameAssemblyFormat">Expected FormatterAssemblyStyle.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithTypeNameHandling(Newtonsoft.Json.TypeNameHandling)">
            <summary>
            Tests the TypeNameHandling property in a JSON serializer settings object.
            </summary>
            <param name="typeNameHandling">Expected TypeNameHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON serializer settings test builder.
            </summary>
            <returns>JSON serializer settings test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1">
            <summary>
            Used for testing JSON results.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithDefaultEncoding">
            <summary>
            Tests whether JSON result has the default UTF8 encoding.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithEncoding(System.Text.Encoding)">
            <summary>
            Tests whether JSON result has the provided encoding.
            </summary>
            <param name="encoding">Expected encoding to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithDefaulJsonSerializerSettings">
            <summary>
            Tests whether JSON result has the default JSON serializer settings.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Tests whether JSON result has the provided JSON serializer settings.
            </summary>
            <param name="jsonSerializerSettings">Expected JSON serializer settings to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithJsonSerializerSettings(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder})">
            <summary>
            Tests whether JSON result has JSON serializer settings by using builder.
            </summary>
            <param name="jsonSerializerSettingsBuilder">Builder for creating JSON serializer settings.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON result tests.
            </summary>
            <returns>JSON result test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Models.ModelDetailsTestBuilder`1">
            <summary>
            Used for testing the response model members.
            </summary>
            <typeparam name="TResponseModel">Response model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Models.ModelErrorTestBuilder`1">
            <summary>
            Used for testing the model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="T:MyWebApi.Builders.Models.ModelErrorTestBuilder">
            <summary>
            Used for testing the model errors.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Models.ModelErrorTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="modelState">Optional model state dictionary to use the class with. Default is controller's model state.</param>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder.ContainingNoModelStateErrors">
            <summary>
            Tests whether tested action's model state is valid.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Models.ModelErrorTestBuilder.ModelState">
            <summary>
            Gets validated model state of the provided ASP.NET Web API controller instance.
            </summary>
            <value>Model state dictionary containing all validation errors.</value>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Models.ModelErrorTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="model">Model returned from action result.</param>
            <param name="modelState">Optional model state dictionary to use the class with. Default is controller's model state.</param>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>This instance in order to support method chaining.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorTestBuilder`1.AndProvideTheModel">
            <summary>
            Gets the model returned from an action result.
            </summary>
            <returns>Model returned from action result.</returns>
        </member>
        <member name="P:MyWebApi.Builders.Models.ModelErrorTestBuilder`1.Model">
            <summary>
            Gets model from invoked action in ASP.NET Web API controller.
            </summary>
            <value>Model from invoked action.</value>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelDetailsTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Models.ModelDetailsTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="responseModel">Response model from invoked action.</param>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelDetailsTestBuilder`1.Passing(System.Action{`0})">
            <summary>
            Tests whether the returned response model from the invoked action passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelDetailsTestBuilder`1.Passing(System.Func{`0,System.Boolean})">
            <summary>
            Tests whether the returned response model from the invoked action passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1">
            <summary>
            Used for testing specific model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,MyWebApi.Builders.Contracts.Models.IAndModelErrorTestBuilder{`0},System.String,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.ModelError})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="model">Model returned from action result.</param>
            <param name="modelErrorTestBuilder">Original model error test builder.</param>
            <param name="errorKey">Key in ModelStateDictionary corresponding to this particular error.</param>
            <param name="aggregatedErrors">All errors found in ModelStateDictionary for given error key.</param>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1">
            <summary>
            Used for testing ok result.
            </summary>
            <typeparam name="TActionResult">Type of ok result - OkResult or OkNegotiatedContentResult{T}.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithNoResponseModel">
            <summary>
            Tests whether no response model is returned from the invoked action.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithDefaultContentNegotiator">
            <summary>
            Tests whether ok result has the default content negotiator.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether ok result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether ok result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether ok result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether ok result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingDefaultFormatters">
            <summary>
            Tests whether ok result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatters(System.Action{MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether ok result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining ok tests.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.Actions.ActionResultTestBuilder`1">
            <summary>
            Used for building the action result which will be tested.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ActionResultTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.Actions.ActionResultTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ActionResultTestBuilder`1.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ActionResultTestBuilder`1.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.Actions.ActionResultTestBuilder`1.ShouldReturn">
            <summary>
            Used for testing returned action result.
            </summary>
            <returns>Should return test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1">
            <summary>
            Used for testing redirect results.
            </summary>
            <typeparam name="TRedirectResult">Type of redirect result - RedirectResult or RedirectToRouteResult.</typeparam>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocation(System.String)">
            <summary>
            Tests whether redirect result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocation(System.Uri)">
            <summary>
            Tests whether redirect result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocation(System.Action{MyWebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether redirect result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder">
            <summary>
            Used for building mocked AuthenticationHeaderValue.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.WithScheme(MyWebApi.AuthenticationScheme)">
            <summary>
            Sets scheme to the built authentication header value with the provided AuthenticationScheme enumeration.
            </summary>
            <param name="scheme">Enumeration with default authentication header schemes.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.WithScheme(System.String)">
            <summary>
            Sets scheme to the built authentication header value with the provided string.
            </summary>
            <param name="scheme">Authentication header value scheme as string.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.WithParameter(System.String)">
            <summary>
            Sets parameter to the built authentication header value with the provided string.
            </summary>
            <param name="parameter">Authentication header value parameter as string.</param>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder">
            <summary>
            Used for building collection of AuthenticationHeaderValue.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder.ContainingHeader(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Adds built header to the collection of authentication header values.
            </summary>
            <param name="authenticationHeaderValueBuilder">Action providing authentication header value builder.</param>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining header builders.
            </summary>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder">
            <summary>
            Used for testing the authentication header challenges in unauthorized results.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Web.Http.Results.UnauthorizedResult)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder"/> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(MyWebApi.AuthenticationScheme)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided default scheme.
            </summary>
            <param name="scheme">Enumeration containing default schemes.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided scheme as string.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String,System.String)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided scheme and parameter.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <param name="parameter">Parameter as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided authenticated header value.
            </summary>
            <param name="challenge">AuthenticationHeaderValue containing scheme and parameter.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Tests whether an unauthorized result contains authenticated header using the provided authenticated header value builder.
            </summary>
            <param name="challengeBuilder">Builder for creating AuthenticationHeaderValue.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided collection.
            </summary>
            <param name="challenges">Collection of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided ones as parameters.
            </summary>
            <param name="challenges">Parameters of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Action{MyWebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder})">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided ones from the challenges builder.
            </summary>
            <param name="challengesBuilder">Builder for creating collection of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyWebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining unauthorized result tests.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="T:MyWebApi.Builders.UserBuilder">
            <summary>
            Used for building mocked Controller.User object.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.UserBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Builders.UserBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyWebApi.Builders.UserBuilder.WithUsername(System.String)">
            <summary>
            Used for setting username to the mocked user object.
            </summary>
            <param name="username">The username to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.UserBuilder.WithAuthenticationType(System.String)">
            <summary>
            Used for setting authentication type to the mocked user object.
            </summary>
            <param name="authenticationType">The authentication type to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.UserBuilder.InRole(System.String)">
            <summary>
            Used for adding user role to the mocked user object.
            </summary>
            <param name="role">The user role to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.UserBuilder.InRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Collection of roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyWebApi.Builders.UserBuilder.InRoles(System.String[])">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="T:MyWebApi.AuthenticationScheme">
            <summary>
            Contains default authenticated header schemes.
            </summary>
        </member>
        <member name="F:MyWebApi.AuthenticationScheme.Anonymous">
            <summary>
            Anonymous authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyWebApi.AuthenticationScheme.Basic">
            <summary>
            Basic authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyWebApi.AuthenticationScheme.Digest">
            <summary>
            Digest authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyWebApi.AuthenticationScheme.NTLM">
            <summary>
            NTLM authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyWebApi.AuthenticationScheme.Negotiate">
            <summary>
            Negotiate authenticated header scheme.
            </summary>
        </member>
        <member name="T:MyWebApi.Common.Extensions.ObjectExtensions">
            <summary>
            Provides extension methods to Object class.
            </summary>
        </member>
        <member name="M:MyWebApi.Common.Extensions.ObjectExtensions.GetName(System.Object)">
            <summary>
            Gets friendly type name of object. Useful for generic types.
            </summary>
            <param name="obj">Object to get friendly name from.</param>
            <returns>Friendly name as string.</returns>
        </member>
        <member name="T:MyWebApi.Common.Extensions.EnumerableExtensions">
            <summary>
            Provides extension methods to IEnumerable.
            </summary>
        </member>
        <member name="M:MyWebApi.Common.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Provides easier linear traversing over all items in collection and executing a function on each of them.
            </summary>
            <typeparam name="T">Type of objects in the collection.</typeparam>
            <param name="collection">Collection to traverse.</param>
            <param name="action">Function to execute on each item in the collection.</param>
        </member>
        <member name="T:MyWebApi.Common.MockedUri">
            <summary>
            Mocked URI object.
            </summary>
        </member>
        <member name="P:MyWebApi.Common.MockedUri.Host">
            <summary>
            Gets or sets the host of the mocked URI.
            </summary>
            <value>Host as string.</value>
        </member>
        <member name="P:MyWebApi.Common.MockedUri.Port">
            <summary>
            Gets or sets the port of the mocked URI.
            </summary>
            <value>Port as integer.</value>
        </member>
        <member name="P:MyWebApi.Common.MockedUri.AbsolutePath">
            <summary>
            Gets or sets the absolute path of the mocked URI.
            </summary>
            <value>Absolute path as string.</value>
        </member>
        <member name="P:MyWebApi.Common.MockedUri.Scheme">
            <summary>
            Gets or sets the scheme of the mocked URI.
            </summary>
            <value>Scheme as string.</value>
        </member>
        <member name="P:MyWebApi.Common.MockedUri.Query">
            <summary>
            Gets or sets the query of the mocked URI.
            </summary>
            <value>Query as string.</value>
        </member>
        <member name="P:MyWebApi.Common.MockedUri.Fragment">
            <summary>
            Gets or sets the document fragment of the mocked URI.
            </summary>
            <value>Document fragment as string.</value>
        </member>
        <member name="T:MyWebApi.Common.TypeValuePair">
            <summary>
            Type-value pair containing type and value for an object.
            </summary>
        </member>
        <member name="P:MyWebApi.Common.TypeValuePair.Type">
            <summary>
            Gets or sets the type of the object in the type-value pair.
            </summary>
            <value>Object's type.</value>
        </member>
        <member name="P:MyWebApi.Common.TypeValuePair.Value">
            <summary>
            Gets or sets the value of the object in the type-value pair.
            </summary>
            <value>Object's value.</value>
        </member>
        <member name="T:MyWebApi.Common.Identity.MockedIIdentity">
            <summary>
            Mocked IIdentity object.
            </summary>
        </member>
        <member name="M:MyWebApi.Common.Identity.MockedIIdentity.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Common.Identity.MockedIIdentity"/> class.
            </summary>
            <param name="name">Initial name.</param>
            <param name="authenticationType">Initial authentication type.</param>
            <param name="isAuthenticated">Initial value for setting whether the user is authenticated or not.</param>
        </member>
        <member name="P:MyWebApi.Common.Identity.MockedIIdentity.Name">
            <summary>
            Gets the name of the mocked IIdentity.
            </summary>
            <value>Name as string.</value>
        </member>
        <member name="P:MyWebApi.Common.Identity.MockedIIdentity.AuthenticationType">
            <summary>
            Gets the authentication type of the mocked IIdentity.
            </summary>
            <value>Authentication type as string.</value>
        </member>
        <member name="P:MyWebApi.Common.Identity.MockedIIdentity.IsAuthenticated">
            <summary>
            Gets a value indicating whether the IIdentity is authenticated or not.
            </summary>
            <value>True or False.</value>
        </member>
        <member name="T:MyWebApi.Common.Identity.MockedIPrinciple">
            <summary>
            Mocked IPrinciple object.
            </summary>
        </member>
        <member name="M:MyWebApi.Common.Identity.MockedIPrinciple.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebApi.Common.Identity.MockedIPrinciple"/> class.
            </summary>
            <param name="username">Initial username.</param>
            <param name="principalType">Initial principal type.</param>
            <param name="roles">Initial user roles.</param>
        </member>
        <member name="M:MyWebApi.Common.Identity.MockedIPrinciple.CreateUnauthenticated">
            <summary>
            Static constructor for creating default unauthenticated mocked user object.
            </summary>
            <returns>Unauthenticated IPrincipal.</returns>
        </member>
        <member name="M:MyWebApi.Common.Identity.MockedIPrinciple.CreateDefaultAuthenticated">
            <summary>
            Static constructor for creating default authenticated mocked user object with "TestUser" username.
            </summary>
            <returns>Authenticated IPrincipal.</returns>
        </member>
        <member name="M:MyWebApi.Common.Identity.MockedIPrinciple.IsInRole(System.String)">
            <summary>
            Checks whether the current user is in user role.
            </summary>
            <param name="role">User role to check.</param>
            <returns>True or False.</returns>
        </member>
        <member name="P:MyWebApi.Common.Identity.MockedIPrinciple.Identity">
            <summary>
            Gets the IIdentity of the IPrinciple.
            </summary>
            <value>IIdentity object.</value>
        </member>
        <member name="T:MyWebApi.Common.VoidActionResult">
            <summary>
            Represents void action result in generic test builder.
            </summary>
        </member>
        <member name="M:MyWebApi.Common.VoidActionResult.Create">
            <summary>
            Creates new instance of <see cref="T:MyWebApi.Common.VoidActionResult"/>.
            </summary>
            <returns>Void action result.</returns>
        </member>
        <member name="T:MyWebApi.Exceptions.ActionCallAssertionException">
            <summary>
            Exception for invalid action call.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.ActionCallAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActionCallAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.AttributeAssertionException">
            <summary>
            Exception for invalid attributes.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.AttributeAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AttributeAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.BadRequestResultAssertionException">
            <summary>
            Exception for invalid bad request result.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.BadRequestResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BadRequestResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.ContentResultAssertionException">
            <summary>
            Exception for invalid content result.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.ContentResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContentResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.CreatedResultAssertionException">
            <summary>
            Exception for invalid created result.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.CreatedResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CreatedResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.HttpActionResultAssertionException">
            <summary>
            Exception for invalid action return type when expecting IHttpActionResult.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.HttpActionResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpActionResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.HttpResponseMessageAssertionException">
            <summary>
            Exception for invalid HTTP response message result.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.HttpResponseMessageAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpResponseMessageAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.HttpStatusCodeResultAssertionException">
            <summary>
            Exception for invalid status code result when expecting certain HTTP status code.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.HttpStatusCodeResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpStatusCodeResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.InternalServerErrorResultAssertionException">
            <summary>
            Exception for invalid internal server error result.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.InternalServerErrorResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InternalServerErrorResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.InvalidExceptionAssertionException">
            <summary>
            Exception for invalid expected exceptions.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.InvalidExceptionAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidExceptionAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.InvalidHttpRequestMessageException">
            <summary>
            Exception for invalid HTTP request message.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.InvalidHttpRequestMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidHttpRequestMessageException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.JsonResultAssertionException">
            <summary>
            Exception for invalid JSON result.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.JsonResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JSONResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.OkResultAssertionException">
            <summary>
            Exception for invalid ok result.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.OkResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OkResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.ResponseModelAssertionException">
            <summary>
            Exception for invalid action return type when expecting response model.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.ResponseModelAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResponseModelAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.ModelErrorAssertionException">
            <summary>
            Exception for model with errors.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.ModelErrorAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ModelErrorAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.UnauthorizedResultAssertionException">
            <summary>
            Exception for invalid unauthorized result when authentication header challenges do not match.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.UnauthorizedResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UnauthorizedResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.UnresolvedDependenciesException">
            <summary>
            Exception for controller unresolved dependencies.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.UnresolvedDependenciesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UnresolvedDependenciesException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.Exceptions.RedirectResultAssertionException">
            <summary>
            Exception for invalid URI validation.
            </summary>
        </member>
        <member name="M:MyWebApi.Exceptions.RedirectResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RedirectResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyWebApi.HttpHeader">
            <summary>
            Contains common HTTP header names.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Accept">
            <summary>
            Represents Accept header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.AcceptCharset">
            <summary>
            Represents AcceptCharset header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.AcceptEncoding">
            <summary>
            Represents AcceptEncoding header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.AcceptLanguage">
            <summary>
            Represents AcceptLanguage header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Authorization">
            <summary>
            Represents Authorization header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.CacheControl">
            <summary>
            Represents CacheControl header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Connection">
            <summary>
            Represents Connection header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.ConnectionClose">
            <summary>
            Represents ConnectionClose header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Date">
            <summary>
            Represents Date header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Expect">
            <summary>
            Represents Expect header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.ExpectContinue">
            <summary>
            Represents ExpectContinue header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.From">
            <summary>
            Represents From header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Host">
            <summary>
            Represents Host header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.IfMatch">
            <summary>
            Represents IfMatch header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.IfModifiedSince">
            <summary>
            Represents IfModifiedSince header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.IfNoneMatch">
            <summary>
            Represents IfNoneMatch header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.IfRange">
            <summary>
            Represents IfRange header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.IfUnmodifiedSince">
            <summary>
            Represents IfUnmodifiedSince header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.MaxForwards">
            <summary>
            Represents MaxForwards header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Pragma">
            <summary>
            Represents Pragma header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.ProxyAuthorization">
            <summary>
            Represents ProxyAuthorization header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Range">
            <summary>
            Represents Range header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Referrer">
            <summary>
            Represents Referrer header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.TE">
            <summary>
            Represents TE header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Trailer">
            <summary>
            Represents Trailer header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.TransferEncoding">
            <summary>
            Represents TransferEncoding header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.TransferEncodingChunked">
            <summary>
            Represents TransferEncodingChunked header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Upgrade">
            <summary>
            Represents Upgrade header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.UserAgent">
            <summary>
            Represents UserAgent header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Via">
            <summary>
            Represents Via header name.
            </summary>
        </member>
        <member name="F:MyWebApi.HttpHeader.Warning">
            <summary>
            Represents Warning header name.
            </summary>
        </member>
        <member name="T:MyWebApi.MediaType">
            <summary>
            Contains common MIME type values.
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.TextPlain">
            <summary>
            Represents text/plain (txt).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.TextHtml">
            <summary>
            Represents text/html (html).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.TextCss">
            <summary>
            Represents text/css (css).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ImageBmp">
            <summary>
            Represents image/bmp (bmp).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ImageJpeg">
            <summary>
            Represents image/jpeg (jpeg or jpg).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ImagePng">
            <summary>
            Represents image/png (png).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ImageGif">
            <summary>
            Represents image/gif (gif).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ApplicationJavaScript">
            <summary>
            Represents "application/x-javascript" (js).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ApplicationJson">
            <summary>
            Represents application/json (json).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ApplicationXml">
            <summary>
            Represents application/xml (xml).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ApplicationOctetStream">
            <summary>
            Represents application/octet-stream (exe).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.ApplicationZip">
            <summary>
            Represents application/zip (zip).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.AudioMpeg">
            <summary>
            Represents audio/mpeg (mp3).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.AudioVorbis">
            <summary>
            Represents audio/vorbis (ogg).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.VideoAvi">
            <summary>
            Represents video/avi (avi).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.VideoMpeg">
            <summary>
            Represents video/mpeg (mpeg).
            </summary>
        </member>
        <member name="F:MyWebApi.MediaType.VideoQuicktime">
            <summary>
            Represents video/quicktime (qt).
            </summary>
        </member>
        <member name="T:MyWebApi.MyWebApi">
            <summary>
            Starting point of the testing framework, which provides a way to specify the ASP.NET Web API controller to be tested.
            </summary>
        </member>
        <member name="M:MyWebApi.MyWebApi.Controller``1">
            <summary>
            Selects controller on which the test will be executed. Controller is instantiated with default constructor.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
            <returns>Controller builder used to build the test case.</returns>
        </member>
        <member name="M:MyWebApi.MyWebApi.Controller``1(``0)">
            <summary>
            Selects controller on which the test will be executed.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
            <param name="controller">Instance of the ASP.NET Web API controller to use.</param>
            <returns>Controller builder used to build the test case.</returns>
        </member>
        <member name="M:MyWebApi.MyWebApi.Controller``1(System.Func{``0})">
            <summary>
            Selects controller on which the test will be executed. Controller is instantiated using construction function.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
            <param name="construction">Construction function returning the instantiated controller.</param>
            <returns>Controller builder used to build the test case.</returns>
        </member>
        <member name="T:MyWebApi.Utilities.ExpressionParser">
            <summary>
            Utility class helping parsing expression trees.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.ExpressionParser.GetMethodName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses method name from method call lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Method name as string.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.ExpressionParser.ResolveMethodArguments(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Resolves arguments from method in method call lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Collection of type-value pairs.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.ExpressionParser.GetMethodAttributes(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Retrieves custom attributes on a method from method call lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Collection of attributes as objects.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.ExpressionParser.GetPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses member name from member lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Member name as string.</returns>
        </member>
        <member name="T:MyWebApi.Utilities.Reflection">
            <summary>
            Class for validating reflection checks.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.AreSameTypes(System.Object,System.Object)">
            <summary>
            Checks whether two objects have the same types.
            </summary>
            <param name="firstObject">First object to be checked.</param>
            <param name="secondObject">Second object to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.AreSameTypes(System.Type,System.Type)">
            <summary>
            Checks whether two types are different.
            </summary>
            <param name="firstType">First type to be checked.</param>
            <param name="secondType">Second type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.AreDifferentTypes(System.Object,System.Object)">
            <summary>
            Checks whether two objects have different types.
            </summary>
            <param name="firstObject">First object to be checked.</param>
            <param name="secondObject">Second object to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.AreDifferentTypes(System.Type,System.Type)">
            <summary>
            Checks whether two types are different.
            </summary>
            <param name="firstType">First type to be checked.</param>
            <param name="secondType">Second type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.AreAssignable(System.Type,System.Type)">
            <summary>
            Checks whether two types are assignable.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.AreNotAssignable(System.Type,System.Type)">
            <summary>
            Checks whether two types are not assignable.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.IsGeneric(System.Type)">
            <summary>
            Checks whether a type is generic.
            </summary>
            <param name="type">Type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.IsNotGeneric(System.Type)">
            <summary>
            Checks whether a type is not generic.
            </summary>
            <param name="type">Type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.IsGenericTypeDefinition(System.Type)">
            <summary>
            Checks whether a type is generic definition.
            </summary>
            <param name="type">Type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.AreAssignableByGeneric(System.Type,System.Type)">
            <summary>
            Checks whether two types are assignable by generic definition.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.HaveDifferentGenericArguments(System.Type,System.Type)">
            <summary>
            Checks whether two generic types have different generic arguments.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.ContainsGenericTypeDefinitionInterface(System.Type,System.Type)">
            <summary>
            Checks whether generic definition contains an base interface generic definition.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.CastTo``1(System.Type,System.Object)">
            <summary>
            Performs dynamic casting from type to generic result.
            </summary>
            <typeparam name="TResult">Result type from casting.</typeparam>
            <param name="type">Type from which the casting should be done.</param>
            <param name="data">Object from which the casting should be done.</param>
            <returns>Casted object of type TResult.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.ToFriendlyTypeName(System.Type)">
            <summary>
            Transforms generic type name to friendly one, showing generic type arguments.
            </summary>
            <param name="type">Type which name will be transformed.</param>
            <returns>Transformed name as string.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.TryCreateInstance``1(System.Object[])">
            <summary>
            Tries to create instance of type T by using the provided unordered constructor parameters.
            </summary>
            <typeparam name="T">Type of created instance.</typeparam>
            <param name="constructorParameters">Unordered constructor parameters.</param>
            <returns>Created instance or null, if no suitable constructor found.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Reflection.GetCustomAttributes(System.Object)">
            <summary>
            Gets custom attributes on the provided object.
            </summary>
            <param name="obj">Object decorated with custom attribute.</param>
            <returns>IEnumerable of objects representing the custom attributes.</returns>
        </member>
        <member name="T:MyWebApi.Utilities.Validators.AttributesValidator">
            <summary>
            Validator class containing attributes validation logic.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.AttributesValidator.ValidateNoAttributes(System.Collections.Generic.IEnumerable{System.Object},System.Action{System.String,System.String})">
            <summary>
            Validates whether the provided collection of attributes contains zero elements.
            </summary>
            <param name="attributes">Collection of attributes to validate.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.AttributesValidator.ValidateNumberOfAttributes(System.Collections.Generic.IEnumerable{System.Object},System.Action{System.String,System.String},System.Nullable{System.Int32})">
            <summary>
            Validates if any attributes are contained in the provided collection of attributes.
            </summary>
            <param name="attributes">Collection of attributes to validate.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <param name="withTotalNumberOf">Optional parameter specifying the exact number of expected attributes.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.AttributesValidator.ValidateAttributes(System.Collections.Generic.IEnumerable{System.Object},MyWebApi.Builders.Attributes.BaseAttributesTestBuilder,System.Action{System.String,System.String})">
            <summary>
            Validation collection attribute based on attribute test builder.
            </summary>
            <param name="attributes">Collection of attributes to validate.</param>
            <param name="attributesTestBuilder">Test builder containing attribute specific validation.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyWebApi.Utilities.Validators.CommonValidator">
            <summary>
            Validator class containing common validation logic.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.CommonValidator.CheckForNullReference(System.Object,System.String)">
            <summary>
            Validates object for null reference.
            </summary>
            <param name="value">Object to be validated.</param>
            <param name="errorMessageName">Name of the parameter to be included in the error message.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.CommonValidator.CheckForNotWhiteSpaceString(System.String,System.String)">
            <summary>
            Validates string for null reference or whitespace.
            </summary>
            <param name="value">String to be validated.</param>
            <param name="errorMessageName">Name of the parameter to be included in the error message.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.CommonValidator.CheckForEqualityWithDefaultValue``1(``0,System.String)">
            <summary>
            Validates whether the provided value is not null or equal to the type's default value.
            </summary>
            <typeparam name="T">Type of the provided value.</typeparam>
            <param name="value">Value to be validated.</param>
            <param name="errorMessage">Error message if the validation fails.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.CommonValidator.CheckForException(System.Exception)">
            <summary>
            Validated whether a non-null exception is provided and throws ActionCallAssertionException with proper message.
            </summary>
            <param name="exception">Exception to be validated.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.CommonValidator.CheckEquality``1(``0,``0)">
            <summary>
            Validates that two objects are equal using the Equals method.
            </summary>
            <typeparam name="T">Type of the objects.</typeparam>
            <param name="expected">Expected object.</param>
            <param name="actual">Actual object.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.CommonValidator.CheckForDefaultValue``1(``0)">
            <summary>
            Validates whether object equals the default value for its type.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="value">Object to test.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.CommonValidator.CheckIfTypeCanBeNull(System.Type)">
            <summary>
            Validates whether type can be null.
            </summary>
            <param name="type">Type to check.</param>
        </member>
        <member name="T:MyWebApi.Utilities.Validators.ContentNegotiatorValidator">
            <summary>
            Validator class containing IContentNegotiator validation logic.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.ContentNegotiatorValidator.ValidateContentNegotiator(System.Object,System.Net.Http.Formatting.IContentNegotiator,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the IContentNegotiator from action result containing one.
            </summary>
            <param name="actionResult">Action result with IContentNegotiator.</param>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyWebApi.Utilities.Validators.LocationValidator">
            <summary>
            Validator class containing URI validation logic.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.LocationValidator.ValidateAndGetWellFormedUriString(System.String,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates an URI provided as string.
            </summary>
            <param name="location">Expected URI as string.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <returns>Valid Uri created from the provided string.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.LocationValidator.ValidateUri(System.Object,System.Uri,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Uri from action result containing one.
            </summary>
            <param name="actionResult">Action result with Uri.</param>
            <param name="location">Expected Uri.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.LocationValidator.ValidateLocation(System.Object,System.Action{MyWebApi.Builders.Uris.MockedUriTestBuilder},System.Action{System.String,System.String,System.String})">
            <summary>
            Validates URI by using UriTestBuilder.
            </summary>
            <param name="actionResult">Dynamic representation of action result.</param>
            <param name="uriTestBuilder">UriTestBuilder for validation.</param>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
        </member>
        <member name="T:MyWebApi.Utilities.Validators.MediaTypeFormatterValidator">
            <summary>
            Validator class containing MediaTypeFormatter validation logic.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.MediaTypeFormatterValidator.GetDefaultMediaTypeFormatters">
            <summary>
            Returns default media type formatters used in ASP.NET Web API.
            </summary>
            <returns>Enumerable of MediaTypeFormatter.</returns>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.MediaTypeFormatterValidator.ValidateMediaTypeFormatter(System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Formatters from action result containing one.
            </summary>
            <param name="actionResult">Action result with Formatters.</param>
            <param name="mediaTypeFormatter">Expected MediaTypeFormatter.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.MediaTypeFormatterValidator.ValidateMediaTypeFormatters(System.Object,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Formatters from action result containing one.
            </summary>
            <param name="actionResult">Action result with Formatters.</param>
            <param name="mediaTypeFormatters">Expected enumerable of MediaTypeFormatter.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.MediaTypeFormatterValidator.ValidateMediaTypeFormattersBuilder(System.Object,System.Action{MyWebApi.Builders.Contracts.Formatters.IFormattersBuilder},System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Formatters from action result containing one.
            </summary>
            <param name="actionResult">Action result with Formatters.</param>
            <param name="formattersBuilder">Formatters builder.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyWebApi.Utilities.Validators.RuntimeBinderValidator">
            <summary>
            Validator class containing dynamic action result calls validation logic.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.RuntimeBinderValidator.ValidateBinding(System.Action)">
            <summary>
            Validates action call for RuntimeBinderException.
            </summary>
            <param name="action">Action to validate.</param>
        </member>
        <member name="T:MyWebApi.Utilities.Validators.VersionValidator">
            <summary>
            Validator class containing Version validation logic.
            </summary>
        </member>
        <member name="M:MyWebApi.Utilities.Validators.VersionValidator.TryParse(System.String,System.Action{System.String,System.String,System.String})">
            <summary>
            Tries to parse version from string.
            </summary>
            <param name="version">Provided version string.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <returns>Valid Version from the provided string.</returns>
        </member>
    </members>
</doc>
